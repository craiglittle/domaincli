#!/usr/bin/env python
import logging
import optparse
import os
import sys
import urllib
import urllib2
import urlparse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Error(Exception):
    pass

class DomainCLIError(Exception):
    pass

class RPC(object):
    # Yeah yeah yeah, I know.  I'll buy an SSL cert for domaincli.com soon.
    URL = 'https://getpokebot.com:7000/v1'

    # Stolen from Stripe
    def _encodeInner(self, d):
        """
        We want post vars of form:
        {'foo': 'bar', 'nested': {'a': 'b', 'c': 'd'}}
        to become:
        foo=bar&nested[a]=b&nested[c]=d
        """
        stk = []    
        for key, value in d.items():
            if isinstance(value, dict):
                n = {}
                for k, v in value.items():
                    n["%s[%s]" % (key, k)] = v
                    stk.extend(self._encodeInner(n))
            else:
                stk.append((key, value))
        return stk

    # Stolen from Stripe
    def _encode(self, d):
        """
        Internal: encode a string for url representation
        """
        return urllib.urlencode(self._encodeInner(d))

    def call(self, name, args):
        args['method'] = name
        serialized = self._encode(args)
        try:
            c = urllib2.urlopen(self.URL, serialized)
        except urllib2.URLError, e:
            raise DomainCLIError("Unexpected error while talking to server: %s" % (e, ))
        resp = c.read()
        resp = urlparse.parse_qs(resp, strict_parsing=True)
        for k, v in resp.items():
            resp[k] = v[0]
        logging.debug('Result: %r' % resp)
        if resp['object'] == 'error':
            raise DomainCLIError(resp['message'])
        return resp

def before_rpc(msg):
    print msg,
    sys.stdout.flush()

def after_rpc_success(msg):
    print msg

def after_rpc_failure(msg):
    print msg

def check(parser, rpc, opts, args):
    if len(args) == 0:
        parser.print_help()
        return 1
    for arg in args:
        before_rpc('Checking status of %s...' % (arg, ))
        sys.stdout.flush()
        res = rpc.call('check_availability', { 'domain' : arg })
        if res['available'] == 'True':
            after_rpc_success('Available!')
        else:
            after_rpc_failure('Taken :(!')

def register(parser, rpc, opts, args):
    if len(args) == 0:
        parser.print_help()
        return 1
    for arg in args:
        before_rpc('Trying to register %s...' % arg)
        res = rpc.call('register_domain', { 'domain' : arg })
        if res['success'] == 'True':
            after_rpc_success('success!')
        else:
            after_rpc_failure('failure!')
        print ' \-->', res['message']

def main():
    programs = {'check' : check,
                'register' : register}
    idx = prog = None
    proper_args = sys.argv[1:]
    for i, arg in enumerate(proper_args):
        if len(arg) == 0 or arg[0] != '-':
            idx = i
            prog = arg
            break
    if idx is not None:
        args = proper_args[:idx] + proper_args[idx+1:]
    else:
        args = sys.argv

    if prog == 'check':
        parser = optparse.OptionParser("""%prog [options] check domain [domain...]""")
    elif prog == 'register':
        parser = optparse.OptionParser("""%prog [options] register domain [domain...]""")
    else:
        prog = None
        parser = optparse.OptionParser("""%%prog [options] %s""" % '|'.join(programs.iterkeys()))
    parser.add_option('-v', '--verbosity', help='Verbosity of debugging output.',
                      dest='verbosity', action='count', default=0)
    opts, args = parser.parse_args(args)

    if opts.verbosity == 1:
        logging.getLogger('').setLevel(logging.INFO)
    elif opts.verbosity >= 2:
        logging.getLogger('').setLevel(logging.DEBUG)
    try:
        method = programs[prog]
    except KeyError:
        parser.print_help()
        return 1
    else:
        rpc = RPC()
        logger.debug('About to call %s with %r / %r' % (prog, opts, args))
        return method(parser, rpc, opts, args)

if __name__ == '__main__':
    sys.exit(main())
